{"version":3,"sources":["notification.js"],"names":["NotificationConfig","target","instance","TopicConfig","QueueConfig","CloudFunctionConfig","push","TargetConfig","id","Id","newevent","Event","suffix","Filter","S3Key","FilterRule","Name","Value","prefix","arn","Topic","Queue","CloudFunction","buildARN","partition","service","region","accountId","resource","ObjectCreatedAll","ObjectCreatedPut","ObjectCreatedPost","ObjectCreatedCopy","ObjectCreatedCompleteMultipartUpload","ObjectRemovedAll","ObjectRemovedDelete","ObjectRemovedDeleteMarkerCreated","ObjectReducedRedundancyLostObject","NotificationPoller","client","bucketName","events","ending","process","nextTick","checkForChanges","method","queries","forEach","s3event","sort","query","length","join","makeRequest","e","response","emit","transformer","transformers","getNotificationTransformer","on","result","records","Records","record","destroy","EventEmitter"],"mappings":"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","sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events'\nimport * as transformers from './transformers'\nimport { pipesetup, uriEscape } from './helpers'\n\n// Notification config - array of target configs.\n// Target configs can be\n// 1. Topic (simple notification service)\n// 2. Queue (simple queue service)\n// 3. CloudFront (lambda function)\nexport class NotificationConfig {\n  add(target) {\n    let instance = ''\n    if (target instanceof TopicConfig) {\n      instance = 'TopicConfiguration'\n    }\n    if (target instanceof QueueConfig) {\n      instance = 'QueueConfiguration'\n    }\n    if (target instanceof CloudFunctionConfig) {\n      instance = 'CloudFunctionConfiguration'\n    }\n    if (!this[instance]) this[instance] = []\n    this[instance].push(target)\n  }\n}\n\n// Base class for three supported configs.\nclass TargetConfig {\n  setId(id) {\n    this.Id = id\n  }\n  addEvent(newevent){\n    if (!this.Event) this.Event = []\n    this.Event.push(newevent)\n  }\n  addFilterSuffix(suffix) {\n    if (!this.Filter) this.Filter = {S3Key : {FilterRule:[]}}\n    this.Filter.S3Key.FilterRule.push({Name:\"suffix\", Value:suffix})\n  }\n  addFilterPrefix(prefix) {\n    if (!this.Filter) this.Filter = {S3Key : {FilterRule:[]}}\n    this.Filter.S3Key.FilterRule.push({Name:\"prefix\", Value:prefix})\n  }\n}\n\n// 1. Topic (simple notification service)\nexport class TopicConfig extends TargetConfig {\n  constructor(arn) {\n    super()\n    this.Topic = arn\n  }\n}\n\n// 2. Queue (simple queue service)\nexport class QueueConfig extends TargetConfig {\n  constructor(arn) {\n    super()\n    this.Queue = arn\n  }\n}\n\n// 3. CloudFront (lambda function)\nexport class CloudFunctionConfig extends TargetConfig {\n  constructor(arn) {\n    super()\n    this.CloudFunction = arn\n  }\n}\n\nexport const buildARN = (partition, service, region, accountId, resource) => {\n  return \"arn:\" + partition + \":\" + service + \":\" + region + \":\" + accountId + \":\" + resource\n}\n\n\nexport const ObjectCreatedAll                      = \"s3:ObjectCreated:*\"\nexport const ObjectCreatedPut                      = \"s3:ObjectCreated:Put\"\nexport const ObjectCreatedPost                     = \"s3:ObjectCreated:Post\"\nexport const ObjectCreatedCopy                     = \"s3:ObjectCreated:Copy\"\nexport const ObjectCreatedCompleteMultipartUpload  = \"s3:ObjectCreated:CompleteMultipartUpload\"\nexport const ObjectRemovedAll                      = \"s3:ObjectRemoved:*\"\nexport const ObjectRemovedDelete                   = \"s3:ObjectRemoved:Delete\"\nexport const ObjectRemovedDeleteMarkerCreated      = \"s3:ObjectRemoved:DeleteMarkerCreated\"\nexport const ObjectReducedRedundancyLostObject     = \"s3:ReducedRedundancyLostObject\"\n\n// Poll for notifications, used in #listenBucketNotification.\n// Listening constitutes repeatedly requesting s3 whether or not any\n// changes have occurred.\nexport class NotificationPoller extends EventEmitter {\n  constructor(client, bucketName, prefix, suffix, events) {\n    super()\n\n    this.client = client\n    this.bucketName = bucketName\n    this.prefix = prefix\n    this.suffix = suffix\n    this.events = events\n\n    this.ending = false\n  }\n\n  // Starts the polling.\n  start() {\n    this.ending = false\n\n    process.nextTick(() => {\n      this.checkForChanges()\n    })\n  }\n\n  // Stops the polling.\n  stop() {\n    this.ending = true\n  }\n\n  checkForChanges() {\n    // Don't continue if we're looping again but are cancelled.\n    if (this.ending) return\n\n    let method = 'GET'\n    var queries = []\n    if (this.prefix) {\n      var prefix = uriEscape(this.prefix)\n      queries.push(`prefix=${prefix}`)\n    }\n    if (this.suffix) {\n      var suffix = uriEscape(this.suffix)\n      queries.push(`suffix=${suffix}`)\n    }\n    if (this.events) {\n      this.events.forEach(s3event => queries.push('events='+uriEscape(s3event)))\n    }\n    queries.sort()\n\n    var query = ''\n    if (queries.length > 0) {\n      query = `${queries.join('&')}`\n    }\n    this.client.makeRequest({ method, bucketName: this.bucketName, query }, '', 200, '', true, (e, response) => {\n      if (e) return this.emit('error', e)\n\n      let transformer = transformers.getNotificationTransformer()\n      pipesetup(response, transformer)\n        .on('data', result => {\n          // Data is flushed periodically (every 5 seconds), so we should\n          // handle it after flushing from the JSON parser.\n          let records = result.Records\n          // If null (= no records), change to an empty array.\n          if (!records) records = []\n\n          // Iterate over the notifications and emit them individually.\n          records.forEach(record => {\n            this.emit('notification', record)\n          })\n\n          // If we're done, stop.\n          if (this.ending) response.destroy()\n        })\n        .on('error', e => this.emit('error', e))\n        .on('end', () => {\n          // Do it again, if we haven't cancelled yet.\n          process.nextTick(() => {\n            this.checkForChanges()\n          })\n        })\n    })\n  }\n\n}\n"],"file":"notification.js"}