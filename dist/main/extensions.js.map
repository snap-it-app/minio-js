{"version":3,"sources":["extensions.js"],"names":["extensions","client","bucketName","prefix","recursive","startAfter","undefined","errors","InvalidBucketNameError","InvalidPrefixError","TypeError","delimiter","continuationToken","objects","ended","readStream","Stream","Readable","objectMode","_read","length","push","shift","listObjectsV2WithMetadataQuery","on","e","emit","result","isTruncated","nextContinuationToken","maxKeys","queries","sort","query","join","method","transformer","transformers","getListObjectsV2WithMetadataTransformer","makeRequest","response"],"mappings":"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","sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Stream from 'stream'\n\nimport * as transformers from './transformers'\n\nimport * as errors from './errors.js'\n\nimport { isValidPrefix, isValidBucketName, uriEscape,\n  isBoolean, isNumber, isString,\n  pipesetup } from './helpers.js'\n  \nexport default class extensions {\n\n  constructor(client)\n  {\n    this.client = client\n  }\n\n  // List the objects in the bucket using S3 ListObjects V2 With Metadata\n  //\n  // __Arguments__\n  // * `bucketName` _string_: name of the bucket\n  // * `prefix` _string_: the prefix of the objects that should be listed (optional, default `''`)\n  // * `recursive` _bool_: `true` indicates recursive style listing and `false` indicates directory style listing delimited by '/'. (optional, default `false`)\n  // * `startAfter` _string_: Specifies the key to start after when listing objects in a bucket. (optional, default `''`)\n  //\n  // __Return Value__\n  // * `stream` _Stream_: stream emitting the objects in the bucket, the object is of the format:\n  //   * `obj.name` _string_: name of the object\n  //   * `obj.prefix` _string_: name of the object prefix\n  //   * `obj.size` _number_: size of the object\n  //   * `obj.etag` _string_: etag of the object\n  //   * `obj.lastModified` _Date_: modified time stamp\n  //   * `obj.metadata` _object_: metadata of the object\n\n  listObjectsV2WithMetadata(bucketName, prefix, recursive, startAfter) {\n    if (prefix === undefined) prefix = ''\n    if (recursive === undefined) recursive = false\n    if (startAfter === undefined) startAfter = ''\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName)\n    }\n    if (!isValidPrefix(prefix)) {\n      throw new errors.InvalidPrefixError(`Invalid prefix : ${prefix}`)\n    }\n    if (!isString(prefix)) {\n      throw new TypeError('prefix should be of type \"string\"')\n    }\n    if (!isBoolean(recursive)) {\n      throw new TypeError('recursive should be of type \"boolean\"')\n    }\n    if (!isString(startAfter)) {\n      throw new TypeError('startAfter should be of type \"string\"')\n    }\n    // if recursive is false set delimiter to '/'\n    var delimiter = recursive ? '' : '/'\n    var continuationToken = ''\n    var objects = []\n    var ended = false\n    var readStream = Stream.Readable({objectMode: true})\n    readStream._read = () => {\n      // push one object per _read()\n      if (objects.length) {\n        readStream.push(objects.shift())\n        return\n      }\n      if (ended) return readStream.push(null)\n      // if there are no objects to push do query for the next batch of objects\n      this.listObjectsV2WithMetadataQuery(bucketName, prefix, continuationToken, delimiter, 1000, startAfter)\n        .on('error', e => readStream.emit('error', e))\n        .on('data', result => {\n          if (result.isTruncated) {\n            continuationToken = result.nextContinuationToken\n          } else {\n            ended = true\n          }\n          objects = result.objects\n          readStream._read()\n        })\n    }\n    return readStream\n  }\n\n  // listObjectsV2WithMetadataQuery - (List Objects V2 with metadata) - List some or all (up to 1000) of the objects in a bucket.\n  //\n  // You can use the request parameters as selection criteria to return a subset of the objects in a bucket.\n  // request parameters :-\n  // * `bucketName` _string_: name of the bucket\n  // * `prefix` _string_: Limits the response to keys that begin with the specified prefix.\n  // * `continuation-token` _string_: Used to continue iterating over a set of objects.\n  // * `delimiter` _string_: A delimiter is a character you use to group keys.\n  // * `max-keys` _number_: Sets the maximum number of keys returned in the response body.\n  // * `start-after` _string_: Specifies the key to start after when listing objects in a bucket.\n\n  listObjectsV2WithMetadataQuery(bucketName, prefix, continuationToken, delimiter, maxKeys, startAfter) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError('Invalid bucket name: ' + bucketName)\n    }\n    if (!isString(prefix)) {\n      throw new TypeError('prefix should be of type \"string\"')\n    }\n    if (!isString(continuationToken)) {\n      throw new TypeError('continuationToken should be of type \"string\"')\n    }\n    if (!isString(delimiter)) {\n      throw new TypeError('delimiter should be of type \"string\"')\n    }\n    if (!isNumber(maxKeys)) {\n      throw new TypeError('maxKeys should be of type \"number\"')\n    }\n    if (!isString(startAfter)) {\n      throw new TypeError('startAfter should be of type \"string\"')\n    }\n    var queries = []\n\n    // Call for listing objects v2 API\n    queries.push(`list-type=2`)\n    // escape every value in query string, except maxKeys\n    queries.push(`prefix=${uriEscape(prefix)}`)\n    queries.push(`delimiter=${uriEscape(delimiter)}`)\n    queries.push(`metadata=true`)\n\n    if (continuationToken) {\n      continuationToken = uriEscape(continuationToken)\n      queries.push(`continuation-token=${continuationToken}`)\n    }\n    // Set start-after\n    if (startAfter) {\n      startAfter = uriEscape(startAfter)\n      queries.push(`start-after=${startAfter}`)\n    }\n    // no need to escape maxKeys\n    if (maxKeys) {\n      if (maxKeys >= 1000) {\n        maxKeys = 1000\n      }\n      queries.push(`max-keys=${maxKeys}`)\n    }\n    queries.sort()\n    var query = ''\n    if (queries.length > 0) {\n      query = `${queries.join('&')}`\n    }\n    var method = 'GET'\n    var transformer = transformers.getListObjectsV2WithMetadataTransformer()\n    this.client.makeRequest({method, bucketName, query}, '', 200, '', true, (e, response) => {\n      if (e) return transformer.emit('error', e)\n      pipesetup(response, transformer)\n    })\n    return transformer\n  }\n}\n"],"file":"extensions.js"}